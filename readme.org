#+AUTHOR: Caleb Gossler
#+TITLE: Emacs Configuration
My =init.el= file uses =org-babel-load-file= to load the Emacs Lisp source code blocks in this README. In other words, this README that you're looking at now is my Emacs configuration.

If the variables I'm setting aren't clear what they're used for, use =\C-h v= and type it in to read the docstring. I'll make sure to mention the interesting parts though.
* Customize
I want my customization information going to a file other than the emacs config file. I don't like the constant churn in my main config file when I make a change through customize.
#+BEGIN_SRC emacs-lisp
  (setf custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file t)
#+END_SRC
* Package
This adds melpa, loads packages, and installs all the packages I want. =package-selected-packages= is new in Emacs 25 and makes it easy to get all your packages installed on new computers.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("org" . "http://orgmode.org/elpa/") t)

  (when (not package-archive-contents)
      (package-refresh-contents))

  (setf package-selected-packages '(org-plus-contrib
				    magit
                                    paredit
                                    swiper
                                    zenburn-theme
                                    spaceline
                                    emms
                                    company
                                    jabber
                                    malyon
                                    bbdb
                                    restclient
                                    multiple-cursors))

  (package-install-selected-packages)
#+END_SRC
* Emacs
** Global Settings
Gotta turn off tabs, also enable auto-revert-mode so changes to the files outside of emacs update the buffers. Plus some other various stuff.
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (global-auto-revert-mode t)
  (setf indent-tabs-mode nil
        initial-buffer-choice "~/org/splash.org"
        vc-follow-symlinks t
        confirm-kill-emacs 'y-or-n-p
        backup-directory-alist '(("." . "~/.emacs.d/backup")))
  (add-to-list 'exec-path "~/.nix-profile/bin")
  (server-start)
#+END_SRC
** Input Method Stuff
This sets up japanese input within emacs. You probably don't need this if you have it set up through your OS?
#+BEGIN_SRC emacs-lisp
  (setf default-input-method "japanese")
#+END_SRC
** Global Key Bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)
  (global-set-key "\C-cj" 'org-clock-jump-to-current-clock)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
** Making Things Look Nice
#+BEGIN_SRC emacs-lisp
  (require 'spaceline-config)
  (setf powerline-default-separator 'wave)
  (when (eq system-type 'darwin) ; fix for spaceline on mac
    (setf ns-use-srgb-colorspace nil))
  (spaceline-spacemacs-theme)
  (load-theme 'zenburn t)
  (show-paren-mode t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
Turn the clock on in the mode-line. I tend to never leave Emacs, so I'd lose track of time otherwise! By default it also shows the load-average, but I'm not really worried about that so I turned it off.
#+BEGIN_SRC emacs-lisp
(setf display-time-default-load-average nil)
(display-time-mode)
#+END_SRC
** Adding My User Info
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Caleb Gossler"
        user-mail-address "caleb.gossler@gmail.com"
        calendar-latitude +47.45
        calendar-longitude -122.30
        calendar-location-name "Seattle, WA")
#+END_SRC
* Auth Sources
Auth sources let you store credentials for services you use in emacs. This way you don't need to keep passwords in plain text in your config.
#+BEGIN_SRC emacs-lisp
  (setf auth-sources
        '((:source "~/org/authinfo.gpg")))
#+END_SRC
* Org-mode
** Some Basics
I'm trying out org-drill for creating and studying flash cards. It looks like if I add it to the org-modules, I need to require =cl= before it gets loaded.
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (require 'org-drill)
  (setf org-drill-learn-fraction 0.45)
#+END_SRC

Now that's loaded so we can start setting some options.
#+BEGIN_SRC emacs-lisp
  (setf org-agenda-files '("~/org/agenda")
        org-refile-targets '((org-agenda-files :maxlevel . 1))
        org-startup-indented t
        org-agenda-span 'day
        org-log-into-drawer t
        org-clock-idle-time 10
        org-return-follows-link t
        org-special-ctrl-a/e t
        org-pretty-entities t
        org-pretty-entities-include-sub-superscripts t
        org-agenda-skip-scheduled-if-deadline-is-shown t)
#+END_SRC
** Configure Text Searching of my Notes
If you use =org-agenda-text-search-extra-files=, You can use the agenda view search facility to do text searching in org files other than your agenda files. This enables evernote-like search features in Emacs!! I set it to include all org files (recursively) in my =~/org/notes/= directory.

Note: =\C-a s= brings up the search prompt in the minibuffer.
#+BEGIN_SRC emacs-lisp
  (setf org-agenda-text-search-extra-files (directory-files-recursively "~/org/notes/" "\.org$"))
#+END_SRC
** Todo Keywords
Setting up keyword workflows.
#+BEGIN_SRC emacs-lisp
  (setf org-todo-keywords
        '((sequence "TODO(t)" "IN PROGRESS(i)" "BLOCKED(b)" "|" "DONE(d!)")))
#+END_SRC
** Clocking
#+BEGIN_SRC emacs-lisp
  (setf org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+END_SRC
** Org-babel
I use ditaa a lot, this enables execution of ditaa code blocks
#+BEGIN_SRC emacs-lisp
  (setf org-ditaa-jar-path "/run/current-system/sw/lib/ditaa.jar")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)))
  (setf org-confirm-babel-evaluate nil)
#+END_SRC
** Org-capture
If any capture doesn't specify a target, fall back to =inbox.org=.

#+BEGIN_SRC emacs-lisp
  (setf org-default-notes-file "~/org/agenda/inbox.org")
#+END_SRC
*** Templates
#+BEGIN_SRC emacs-lisp
  (setf org-capture-templates
	'(("c" "Clock into new")
          ("ct" "Task" entry (file+headline "~/org/agenda/inbox.org" "Tasks")
           "* TODO %?\nSCHEDULED: %T Created: %U\n  Context: %a\n  %i" :clock-in t :clock-keep t)
          ("cm" "Meeting" entry (file+datetree "~/org/agenda/meetings.org")
           "* %?\n** Details\n  + *Agenda*:\n  + *Attendees*:\n" :clock-in t :clock-keep t)
	  ("f" "Create flash card")
	  ("fd" "Definition" entry (file+headline (buffer-file-name) "Flash Cards")
	   "* Definition :drill:\n(from: %a)\n%?\n** Answer")
	  ("fs" "Statement" entry (file+headline (buffer-file-name) "Flash Cards")
	   "* Statement :drill:\n(from: %a)\n%?")
	  ("fv" "vocabulary" entry (file+headline (buffer-file-name) "Flash Cards")
	   "* Vocabulary :drill:\n:PROPERTIES:\n:DRILL_CARD_TYPE: twosided\n:END:\n** Japanese\n%?\n** English")
          ("t" "New Task" entry (file+headline "~/org/agenda/inbox.org" "Tasks")
           "* TODO %?\n  Created: %U\n  Context: %a\n  %i" :kill-buffer)
          ("j" "New Journal Entry" entry (file+datetree "~/org/agenda/journal.org.gpg")
           "* %? %^g\n\nPosted At: %U" :empty-lines-after 1 :kill-buffer t)
          ("r" "Random" entry (file "~/org/agenda/random.org.gpg")
           "* %?\nCreated At: %U" :empty-lines-after 1 :kill-buffer t)
          ("n" "Add Note to Clocked in Entry" item (clock)
           "+ %? (%<%r>)")
          ("b" "Add Checkbox to Clocked in Entry" item (clock)
           "+ [ ] %? (%<%r>)" :prepend t)
          ("a" "Add Task to Clocked in Entry" entry (clock)
           "* TODO %?" :prepend t)))
#+END_SRC
*** Extra
I want to be able to capture notes even when I don't have emacs open in front of me, perhaps while watching a video. Assuming emacs is running in server mode by calling =(start-server)=, You can add a note to the current clocked in entry (which I bound to =(org-capture nil "c")= ) with the command:

=emacsclient -e "(make-capture-frame)"=

I have it set up as a keyboard shortcut in gnome.

Using org-protocols might be a good alternative to this, I'm going to look into that soon.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'delete-other-windows)

  (defadvice org-capture-finalize (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame if it is the capture frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-capture-destroy (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame if it is the capture frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")(width . 75)(height . 10)(top . -1)))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (org-capture nil "n"))
#+END_SRC
This is a shortcut for me to add a note to the clocked in entry.
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cn"
    (lambda () (interactive) (org-capture nil "n")))
#+END_SRC
** Custom Agenda Commands
#+BEGIN_SRC emacs-lisp
  (setf org-agenda-custom-commands
	'(("n" "Agenda and all TODOs"
           ((agenda "")
            (alltodo "")))
          ("w" . "WORK Agenda Commands")
          ("ws" "Standup tagged entries" tags-todo "+work+standup")
	  ("wq" "Question tagged entries" tags "+work+question")
          ("wr" "Entries that need to be sorted" tags "work+sort")
          ("p" . "Personal Agenda Commands")
          ("pr" "Entries that need to be sorted" tags "personal+sort")))
#+END_SRC
* Dired
Dired renders a buffer that it builds off of a call to =ls=. Here we can customize the switches passed to it.
=dired-dwim-target= tells dired to try to guess a default target directory for file operations. This means if there is a Dired buffer displayed in the next window, use that as the target. Convinient when doing operations between directories.
#+BEGIN_SRC emacs-lisp
  (setf dired-listing-switches "-lh"
        delete-by-moving-to-trash t
        dired-dwim-target t)
#+END_SRC
By default, dired shows permissions, user and group, file size, and dates. I prefer a cleaner view, so this enables =dired-hide-details-mode=. You can toggle it on and off with =(= when the extra details are needed.
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC
** Dired-X
Dired-X adds some nice features, one of them is doing file operations async. A must have for doing large/over-the-network file operations
#+BEGIN_SRC emacs-lisp
    (add-hook 'dired-load-hook
              (lambda ()
                (load "dired-x")
                (dired-async-mode)))
#+END_SRC
* Emacs Multimedia System (EMMS)
It's very convenient to be able to control music from within Emacs. I use it mostly to play streams.
#+BEGIN_SRC emacs-lisp
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (require 'emms-history)
  (emms-history-load)
#+END_SRC
* EasyPG
Use gpg2 instead of gpg
#+BEGIN_SRC emacs-lisp
  (setf epg-gpg-program "gpg2")
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (setf ivy-use-virtual-buffers t)
  (setf magit-completing-read-function 'ivy-completing-read)
  (setf ivy-count-format "(%d/%d) ")
  (ivy-mode 1) ; tyring out ivy
#+END_SRC
* Jabber
I use this to connect to google hangouts/talk. It doesn't offer all the features but It's nice being able to chat in emacs.
#+BEGIN_SRC emacs-lisp
  (setf jabber-alert-presence-hooks nil
        jabber-show-resources nil
        jabber-auto-reconnect t
        jabber-history-enabled t
        jabber-roster-show-title nil
        jabber-roster-line-format " %c %-25n %u %-8s  %S"
        jabber-alert-message-wave "~/.emacs.d/data/sound.wav"
        ; jabber-message-alert-same-buffer nil
        jabber-account-list '(("calebdesu@gmail.com"))
        jabber-alert-message-hooks '(jabber-message-notifications
                                     jabber-message-echo
                                     jabber-message-scroll
                                     jabber-message-wave))
#+END_SRC
* BBDB
#+BEGIN_SRC emacs-lisp
  (setf bbdb-file "~/org/bbdb.gpg")
#+END_SRC
* Email
** Outgoing Email
I'm using my Gmail account for outgoing messages via SMTP. Link to the [[info:smtpmail#Emacs%20Speaks%20SMTP][Relevant info page]]. 

After this is set up, you can use =Message= mode (=\C-x m=) to send outgoing email.

For authentication, the first time you connect, Emacs will prompt you for your username and password. By default, it will save it in your authinfo file so you probably want your authinfo encrypted (which is dead simple using EasyPG, a built-in Emacs package).

Or, you can add it manually yourself by appending the following line to your authinfo (adding your username and password):

=machine smtp.gmail.com login <your username>@gmail.com port 587 password <your password>=

/You should have two factor authentication turned on, and generate an app specific password for Emacs through your Google account settings./
#+BEGIN_SRC emacs-lisp
  (setf send-mail-function 'smtpmail-send-it
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        smtpmail-stream-type 'starttls)
#+END_SRC
** Reading Email
#+BEGIN_SRC emacs-lisp
  (setf gnus-select-method '(nnimap "imap.gmail.com"
                                    (nnimap-inbox "INBOX"))
        gnus-startup-file "~/org/newsrc"
        gnus-init-file "~/org/gnus"
        gnus-save-newsrc-file nil
        gnus-read-newsrc-file nil)
#+END_SRC
* IRC
This function has ERC connect to every IRC network entry in your authinfo file.

Each line should look something like:
=machine irc.freenode.net login mynick port irc password mypass=
#+BEGIN_SRC emacs-lisp
  (defun irc-connect-all ()
    (interactive)
    (require 'auth-source)
    (let ((auth (auth-source-search :port "irc" :max 10 :requires '(user secret host))))
      (dolist (login auth)
        (let ((pass (funcall (plist-get login :secret)))
              (nick (plist-get login :user))
              (host (plist-get login :host)))
          (erc :server host :nick nick :password pass)))))
#+END_SRC
ERC Settings
#+BEGIN_SRC emacs-lisp
  (setf erc-hide-list '("JOIN" "PART" "QUIT")
        erc-rename-buffers t
        erc-kill-server-buffer-on-quit t)
#+END_SRC
* Some Extra Commands
+ Sometimes I export an org document to UTF plain text, but need to paste it into an email. This is helpful to get rid of "fill"
#+BEGIN_SRC emacs-lisp
(defun unfill-paragraph ()
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))

(defun unfill-region (start end)
  (interactive "r")
  (let ((fill-column (point-max)))
    (fill-region start end nil)))
#+END_SRC

+ Let's play zork!
#+BEGIN_SRC emacs-lisp
  (defun zork ()
    "Starts a game of Zork."
    (interactive)
    (require 'malyon)
    (malyon "~/.emacs.d/games/zork1.z5"))

  (defun spider ()
    "Starts a game of 'Spider and Web'."
    (interactive)
    (require 'malyon)
    (malyon "~/.emacs.d/games/spider.z5"))
#+END_SRC
* Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
